-- SQL: Structured Query Language.. ANSI Standard
-- Creating a new record
INSERT INTO ARTIST(ARTISTID, NAME)
VALUES(300, 'The Beatles');

-- update a record (NEED A WHERE CLAUSE)
UPDATE ARTIST
SET NAME = 'Hermeto Who?'
WHERE ARTISTID = 47; --DON'T FORGET THIS.. ALWAYS USE THE PK

-- SELECTING BY PK
SELECT ARTISTID, NAME   -- ALL COLUMNS 
FROM ARTIST
WHERE ARTISTID = 47;

-- DELETE A RECORD
DELETE 
FROM PLAYLISTTRACK
WHERE PLAYLISTID = 1 AND TRACKID = 1577;
-- CONFIRM DELETE
SELECT * FROM PLAYLISTTRACK
WHERE PLAYLISTID = 1 AND TRACKID = 1577;
-- TRACK STILL EXISTS IN TRACK TABLE THOUGH
SELECT * FROM TRACK WHERE TRACKID = 1577;

-- Select complexity
SELECT * 
FROM TRACK 
WHERE NAME LIKE '%Song%'; -- wildcard:  % (0-n chars),  _  (1 char)

SELECT NAME, COMPOSER, UNITPRICE 
FROM TRACK WHERE COMPOSER like 'M%'
ORDER BY COMPOSER;

-- JOINS: TRACKS THAT WERE NEVER ORDERED
SELECT NAME AS "Track Title"  -- column alias 
FROM TRACK T                  -- table alias
LEFT JOIN INVOICELINE L
ON T.TRACKID = L.TRACKID
WHERE L.INVOICEID IS NULL;

SELECT * 
FROM TRACK 
LEFT JOIN INVOICELINE
ON TRACK.TRACKID = INVOICELINE.TRACKID;

-- self join: unary relationships
-- Employee -> manager. Get all employees and who their managers are
SELECT  CONCAT(EMP.FIRSTNAME, CONCAT(' ', EMP.LASTNAME)) AS "Employee",
        CONCAT(MGR.FIRSTNAME, CONCAT(' ', MGR.LASTNAME)) AS "Manager"
FROM EMPLOYEE EMP
LEFT JOIN EMPLOYEE MGR
ON EMP.REPORTSTO = MGR.EMPLOYEEID;



